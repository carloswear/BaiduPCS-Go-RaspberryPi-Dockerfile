services:
  baidupcs-go:
    # 使用你之前构建的镜像
    # 确保这个镜像已经通过 'docker build -t carlosguo/baidu-pcs-go:latest .' 构建成功
    image: carlosguo/baidu-pcs-go:latest
    # 容器名称，方便识别和管理
    container_name: baidupcs
    # 保持容器的交互式和伪TTY分配，以便你可以在容器内部执行命令，例如登录
    stdin_open: true # docker run -i
    tty: true # docker run -t
    # 挂载数据卷以实现数据持久化
    # 这对于保存登录信息、配置和下载文件至关重要
    user: 1000:1000 # 替换成 宿主机 的 UID 和 GID
    volumes:
      # 存储 BaiduPCS-Go 的配置和登录信息
      # 将宿主机上的 './config' 目录挂载到容器内的 '/root/.config/BaiduPCS-Go'
      # BaiduPCS-Go 通常会将配置存在这里
      #- /home/carlos/docker/baidupcs/config:/root/.config/BaiduPCS-Go
      - /home/carlos/docker/baidupcs/config:/home/baidupcs/.config/BaiduPCS-Go
      # 存储下载的文件
      - /media/8T/baidupcsgo:/home/baidupcs/downloads
      # /app 是你在 Dockerfile 中设置的工作目录，方便直接下载到这里
      - /tmp/home_backup:/home/baidupcs/backups/home
      - /media/8T/Images:/home/baidupcs/backups/Images
      #- /media/8T/immich-app:/app/backups/immich-app
      - /media/8T/immich-app/library/upload:/home/baidupcs/backups/immich-app/library/upload
      - /media/8T/immich-app/library/backups:/home/baidupcs/backups/immich-app/library/backups
    # 重启策略：容器退出时自动重启，除非被手动停止
    restart: unless-stopped
    # 如果你需要设置特定的环境变量，例如代理，可以在这里添加
    # environment:
    #   - HTTP_PROXY=http://your.proxy.server:port
    #   - HTTPS_PROXY=http://your.proxy.server:port

    # 如果你需要从外部访问容器内的某个端口 (BaiduPCS-Go 通常不需要，但保留此示例)
    # ports:
    #   - "8080:8080" # 示例：将宿主机的8080端口映射到容器的8080端口
networks: {}
